// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id                      String     @id @default(cuid())
  name                    String     @default("")
  productDescription      String     @default("")
  category                Category?  @relation("Product_category", fields: [categoryId], references: [id])
  categoryId              String?    @map("category")
  productPrice            Int
  productImage            Json?
  from_CartItem_productId CartItem[] @relation("CartItem_productId")
  from_Feedback_product   Feedback[] @relation("Feedback_product")

  @@index([categoryId])
}

model User {
  id                 String     @id @default(cuid())
  name               String     @default("")
  userEmail          String     @unique @default("")
  userPassword       String
  userPhone          String     @default("")
  userAddress        String     @default("")
  role               Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId             String?    @map("role")
  posts              Post[]     @relation("Post_author")
  from_Cart_user     Cart[]     @relation("Cart_user")
  from_Invoice_user  Invoice[]  @relation("Invoice_user")
  from_Feedback_user Feedback[] @relation("Feedback_user")

  @@index([roleId])
}

model Category {
  id                    String    @id @default(cuid())
  name                  String    @default("")
  from_Product_category Product[] @relation("Product_category")
}

model Role {
  id                String  @id @default(cuid())
  name              String  @default("")
  canManageProducts Boolean @default(false)
  canManageUser     Boolean @default(false)
  canManagePost     Boolean @default(false)
  canManageRole     Boolean @default(false)
  assignedTo        User[]  @relation("User_role")
}

model Order {
  id         String    @id @default(cuid())
  totalPrice Int?
  createdAt  DateTime? @default(now())
  status     String?
}

model Cart {
  id                   String     @id @default(cuid())
  user                 User?      @relation("Cart_user", fields: [userId], references: [id])
  userId               String?    @map("user")
  quantity             Int?
  createdAt            DateTime?  @default(now())
  items                CartItem[] @relation("Cart_items")
  from_CartItem_cartId CartItem[] @relation("CartItem_cartId")

  @@index([userId])
}

model Invoice {
  id        String    @id @default(cuid())
  price     Int?
  creatDate DateTime?
  user      User?     @relation("Invoice_user", fields: [userId], references: [id])
  userId    String?   @map("user")

  @@index([userId])
}

model CartItem {
  id              String    @id @default(cuid())
  cartId          Cart?     @relation("CartItem_cartId", fields: [cartIdId], references: [id])
  cartIdId        String?   @map("cartId")
  productId       Product[] @relation("CartItem_productId")
  quantity        Int?
  price           Int?
  from_Cart_items Cart[]    @relation("Cart_items")

  @@index([cartIdId])
}

model Post {
  id       String  @id @default(cuid())
  title    String  @default("")
  content  String  @default("")
  link     Json    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  image    Json?
  author   User?   @relation("Post_author", fields: [authorId], references: [id])
  authorId String? @map("author")

  @@index([authorId])
}

model Feedback {
  id        String   @id @default(cuid())
  user      User?    @relation("Feedback_user", fields: [userId], references: [id])
  userId    String?  @map("user")
  product   Product? @relation("Feedback_product", fields: [productId], references: [id])
  productId String?  @map("product")
  comment   String   @default("")

  @@index([userId])
  @@index([productId])
}
